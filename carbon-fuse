#!/bin/sh

# offline-fuse : An offline-fuse filesystem cache.
# Copyright (C) 2015 Fabien Ninoles
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

USAGE=<<EOF
$0 <nickname> <command> [OPTIONS] [...]

Commands:

init	Initialize a new carbon cache.
mount	Mount a carbon cache.
umount	Unmount a carbon cache.
commit	Commit changes to the underlying source.
revert	Revert any changes not commit to the source.
EOF

if [ $# -eq 0 ]
then
    echo $USAGE; exit 0;
fi

name=$1
command=$2
shift 2

## Generic functions

carbon_dryrun=0
carbon_rsync_copy=0
carbon_rsync_options="-lptgoDS -v --progress -h"

carbon_setup_dryrun() {
    carbon_dryrun=1
}

carbon_config_name() {
    echo .carbon.$1.rc
}

carbon_config_file() {
    echo "$HOME/$(carbon_config_name $1)"
}

carbon_read_config() {
    local cfg
    cfg=`carbon_config_file $1`
    if [ ! -e $cfg  ]
    then
        echo Unknown carbon cache $1.
        echo $USAGE exit 1;
    fi
    . $cfg
    hidden_dir="$(readlink -m $wdata_dir/.unionfs)"
    hidden_suffix=_HIDDEN~
}

carbon_if_precommit() {
    if precommit "$1"
    then
        shift
        "$@"
    elif [ $? -ne 1 ]
    then
        exit $?
    fi  
}

carbon_if_postcommit() {
    if postcommit "$1"
    then
        shift
        "$@"
    elif [ $? -ne 1 ]
    then
        exit $?
    fi    
}

carbon_doit() {
    if [ $carbon_dryrun -eq 0 ]
    then
        "$@"
    else
        echo "$@"
    fi
}

carbon_normalize_find() {
    local b p q s
    b=$1
    s=$2
    while read p
    do
        q="${p%$s}"
        echo "${q#$b}"
    done
}

carbon_find_files() {
    local f b s e
	f="$1"
    b="$2"
    s="$3"
    e="$b$f$s"
    if [ -e "$e" -a ! -d "$e" ]
    then
        echo "$f"
    elif [ -d "$b$f" ]
    then
        find "$b$f" -name "*$s" -not -type d | \
            carbon_normalize_find "$b" "$s"
    fi
}
carbon_find_dirs() {
	local f b s e d
    d="$1"
	f="$2"
    b="$3"
    s="$4"
    e="$b$f$s"
    if [ "$d" = "--" ]
    then
        d=""
    fi
    if [ "$d" -a "$s" -a -d "$e" ]
    then
        echo "$f"
    fi
	if [ -d "$b$f" ]
    then
        find "$b$f" $d -name "*$s" -type d | \
            carbon_normalize_find "$b" "$s"
    fi
    if [ "$d" -a "$s" -a -d "$e" ]
    then
        echo "$f"
    fi
}

# return files relative to the target directory, with a / preceding it
# (and no / at the end of directories).
# Exit with an error if the path is invalid.
carbon_normalize() {
    local p f r
    p="$*"
	f="$(readlink -m "$p")"
    r="${f#$target}"
    if [ "$target$r" != "$f" ]
    then
		echo Invalid path \'$p\' 1>&2
        exit 1        
    fi
    if [ -z "$r" ]
    then
        r=/
    fi
    echo "$r"
}

carbon_doit_xargs () {
    echo Running xargs "$@" from $(pwd)
    if [ $carbon_dryrun -ne 0 ] ;
    then
        xargs -0 --verbose -r echo "$@"
    else
        xargs -0 --verbose -r "$@"
    fi
}

## Commit implementation

carbon_commit_from_path() {
    local p r n
    r=$( carbon_normalize $1 )
    # TODO: Merge them to save current space.
    carbon_find_files "$r" "$hidden_dir" "$hidden_suffix" | \
        while read p
        do
            carbon_if_precommit "$p" printf ".%s\0" "$p"
        done | ( cd "$commit_target" && carbon_doit_xargs rm -v )
    carbon_find_dirs -depth "$r" "$hidden_dir" "$hidden_suffix" | \
        while read p
        do
            carbon_if_precommit "$p" printf ".%s\0" "$p"
        done | ( cd "$commit_target" && carbon_doit_xargs rmdir )
    carbon_find_dirs -- "$r" "$wdata_dir" | \
        while read p
        do
            carbon_if_precommit "$p" printf ".%s\0" "$p"
        done | ( cd "$commit_target" && carbon_doit_xargs mkdir -v -p )
    carbon_find_files "$r" "$wdata_dir" | \
        while read p
        do
            carbon_if_precommit "$p" printf ".%s\0" "$p"
        done | if [ $carbon_rsync_copy -eq 0 ]
               then
                   ( cd "$wdata_dir" && carbon_doit_xargs cp -t "$commit_target" )
               else
                   if [ $carbon_dryrun -ne 0 ]
                   then
                       n="-n"
                   else
                       n=""
                   fi
                   echo rsync $n $carbon_rsync_options -0 --files-from=- "$wdata_dir" "$commit_target"
                   rsync $n $carbon_rsync_options -0 --files-from=- "$wdata_dir" "$commit_target"
               fi
    carbon_revert_from_path $1
}

carbon_revert_from_path() {
    local p r
    r=$( carbon_normalize $1 )
    carbon_find_files "$r" "$wdata_dir" | \
        while read p
        do
            carbon_if_postcommit "$p" printf ".%s\0" "$p"
        done | ( cd "$wdata_dir" && carbon_doit_xargs rm -d -v )
    carbon_find_dirs -- "$r" "$wdata_dir" | \
        while read p
        do
            carbon_if_postcommit "$p" printf ".%s\0" "$p"
        done | ( cd "$wdata_dir" && carbon_doit_xargs rmdir -p )
    carbon_find_dirs -- "$r" "$hidden_files" "$hidden_suffix" | \
        while read p
        do
            carbon_if_postcommit "$p" printf ".%s%s\0" "$p" "$hidden_suffix"
        done | ( cd "$hidden_dir" && carbon_doit_xargs rmdir -p )
    carbon_find_files "$r" "$hidden_files" "$hidden_suffix" | \
        while read p
        do
            carbon_if_postcommit "$p" printf ".%s%s\0" "$p" "$hidden_suffix"
        done | ( cd "$hidden_dir" && carbon_doit_xargs rm -v -d )
}

carbon_init() {
     local a b c d r s t u w
     usage=<<EOF
$0 $name init -s <src> -t <target> [OPTIONS]

Options:

-s	Source directory.  Must exist.
-t	Target directory.  Will be created if doesn't exist.
-r	Read-cache size (in bytes).  Default is 0 (all space available).
-w  max-write inodes.  Default to 'ulimit -n' (Currently at $(ulimit -n)).
-d  Data directory.  Where the cache data will be saved. Default to $HOME/.carbon/name/data.
EOF
     r=0
     w=`ulimit -n`
     c="$(carbon_config_file $name)"
     b="$HOME/.carbon/$name"
     d="$b/data"
     while getopts s:t:d:r:w: a
     do
	     case $a in
             s) s="$OPTARG" ;;
             t) t="$OPTARG" ;;
             d) d="$OPTARG" ;;
             r) r=$OPTARG ;;
             w) w=$OPTARG ;;
             \?) echo $u; exit 1;;
	     esac
     done
     shift `expr $OPTIND - 1`
     if [ -e "$c" ]
     then
         echo This cache already exist
         echo $u
         exit 1
     fi
     if [ ! -d "$s" ]
     then
         echo Invalid source \'$s\'
         echo $u
         exit 1
     fi
     mkdir -p "$t"
     mkdir -p "$b/read"
     mkdir -p "$d/read"
     mkdir -p "$d/write"
     cat <<EOF > "$c"
src="\$(readlink -f $s)"
target="\$(readlink -f $t)"
read_dir="\$(readlink -f $b/read)"
rdata_dir="\$(readlink -f $d/read)"
wdata_dir="\$(readlink -f $d/write)"
read_options="-ocache=\$rdata_dir,backing_fs=\$src,cache_size=$r,rw"
write_options="-ocow,max_files=$w,use_ino"
carbon_rsync_options="$carbon_rsync_options"

# Parameters for the {pre,post}{mount,unmount} commands are name src target

premount () { 
	return 0 
}
postmount () { 
	return 0
}
preumount () { 
	return 0 
}
postumount () { 
	return 0
}

# Parameters for the {pre,post}commit commands are name path (for each path).

# Returning 1 on a precommit will not copy the file (but will still revert the cached copy)
precommit () {
    return 0
}

# Returning 1 on a postcommit will not revert the cached version.
# Note that pcommit is also called on the revert operations.
postcommit () {
    return $1
}
EOF
}

carbon_mount() {
    carbon_read_config $name
    premount "$name" "$src" "$target"
    backfs $read_options "$read_dir"
    unionfs-fuse $write_options "$wdata_dir=RW:$read_dir" "$target"
    postmount "$name" "$src" "$target"
}

carbon_umount() {
    carbon_read_config $name
    preumount "$name" "$src" "$target"
    fusermount -u "$target" || true
    fusermount -u "$read_dir" || true
    postumount "$name" "$src" "$target"
}

carbon_commit() {
    local a u
    u=<<EOF
$0 $name commit [OPTIONS] files...

Options:

-d	Directly commited to target directory, bypassing the read-cache layer.
-r  Used rsync for copying file.
-n  Dry-run. Do nothing but print the results
EOF
    carbon_read_config $name
    commit_target="$read_dir"
    while getopts ndr a
    do
        case $a in
            d) commit_target="$src" ;;
            n) carbon_setup_dryrun ;;
            r) carbon_rsync_copy=1 ;;
            \?)
                echo Invalid option $a
                echo $u
                exit 1
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    while [ $# -ne 0 ]; do
        carbon_commit_from_path "$1"
        shift
    done
}
 
carbon_revert() {
    local a u
    u=<<EOF
$0 $name revert [OPTIONS] files...

Options:

-d	Directly commited to target directory, bypassing the read-cache layer.
EOF
    
    carbon_read_config $name

    while getopts n a
    do
        case $a in
            n) carbon_setup_dryrun ;;
            \?)
                echo Invalid option $a
                echo $u
                exit 1
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    while [ $# -ne 0 ]; do
        carbon_revert_from_path "$1"
        shift
    done
}

 
case $command in
    init | mount | umount | revert | commit)
        carbon_$command "$@"
        exit 0
        ;;
    *) echo "Unknown command $command"
       echo $USAGE
       exit 1
       ;;
esac

name=$1

